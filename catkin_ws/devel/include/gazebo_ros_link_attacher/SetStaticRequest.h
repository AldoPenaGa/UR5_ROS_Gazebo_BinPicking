// Generated by gencpp from file gazebo_ros_link_attacher/SetStaticRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_ROS_LINK_ATTACHER_MESSAGE_SETSTATICREQUEST_H
#define GAZEBO_ROS_LINK_ATTACHER_MESSAGE_SETSTATICREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_ros_link_attacher
{
template <class ContainerAllocator>
struct SetStaticRequest_
{
  typedef SetStaticRequest_<ContainerAllocator> Type;

  SetStaticRequest_()
    : model_name()
    , link_name()
    , set_static(false)  {
    }
  SetStaticRequest_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , link_name(_alloc)
    , set_static(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_name_type;
  _model_name_type model_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _link_name_type;
  _link_name_type link_name;

   typedef uint8_t _set_static_type;
  _set_static_type set_static;





  typedef boost::shared_ptr< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetStaticRequest_

typedef ::gazebo_ros_link_attacher::SetStaticRequest_<std::allocator<void> > SetStaticRequest;

typedef boost::shared_ptr< ::gazebo_ros_link_attacher::SetStaticRequest > SetStaticRequestPtr;
typedef boost::shared_ptr< ::gazebo_ros_link_attacher::SetStaticRequest const> SetStaticRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator1> & lhs, const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator2> & rhs)
{
  return lhs.model_name == rhs.model_name &&
    lhs.link_name == rhs.link_name &&
    lhs.set_static == rhs.set_static;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator1> & lhs, const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_ros_link_attacher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c88b087ab2df5de6eaae860bb1f0c8e";
  }

  static const char* value(const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c88b087ab2df5deULL;
  static const uint64_t static_value2 = 0x6eaae860bb1f0c8eULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_ros_link_attacher/SetStaticRequest";
  }

  static const char* value(const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model_name\n"
"string link_name\n"
"bool set_static\n"
;
  }

  static const char* value(const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.link_name);
      stream.next(m.set_static);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetStaticRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_ros_link_attacher::SetStaticRequest_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model_name);
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.link_name);
    s << indent << "set_static: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_static);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_ROS_LINK_ATTACHER_MESSAGE_SETSTATICREQUEST_H
