// Generated by gencpp from file vision/Lego_state.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_LEGO_STATE_H
#define VISION_MESSAGE_LEGO_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct Lego_state_
{
  typedef Lego_state_<ContainerAllocator> Type;

  Lego_state_()
    : posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , rotx(0.0)
    , roty(0.0)
    , rotz(0.0)
    , class_id(0)  {
    }
  Lego_state_(const ContainerAllocator& _alloc)
    : posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , rotx(0.0)
    , roty(0.0)
    , rotz(0.0)
    , class_id(0)  {
  (void)_alloc;
    }



   typedef double _posx_type;
  _posx_type posx;

   typedef double _posy_type;
  _posy_type posy;

   typedef double _posz_type;
  _posz_type posz;

   typedef double _rotx_type;
  _rotx_type rotx;

   typedef double _roty_type;
  _roty_type roty;

   typedef double _rotz_type;
  _rotz_type rotz;

   typedef int64_t _class_id_type;
  _class_id_type class_id;





  typedef boost::shared_ptr< ::vision::Lego_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::Lego_state_<ContainerAllocator> const> ConstPtr;

}; // struct Lego_state_

typedef ::vision::Lego_state_<std::allocator<void> > Lego_state;

typedef boost::shared_ptr< ::vision::Lego_state > Lego_statePtr;
typedef boost::shared_ptr< ::vision::Lego_state const> Lego_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::Lego_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::Lego_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision::Lego_state_<ContainerAllocator1> & lhs, const ::vision::Lego_state_<ContainerAllocator2> & rhs)
{
  return lhs.posx == rhs.posx &&
    lhs.posy == rhs.posy &&
    lhs.posz == rhs.posz &&
    lhs.rotx == rhs.rotx &&
    lhs.roty == rhs.roty &&
    lhs.rotz == rhs.rotz &&
    lhs.class_id == rhs.class_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision::Lego_state_<ContainerAllocator1> & lhs, const ::vision::Lego_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision::Lego_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::Lego_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::Lego_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::Lego_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::Lego_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::Lego_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::Lego_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b52ed836370681e6ac7dd0d073d7baf5";
  }

  static const char* value(const ::vision::Lego_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb52ed836370681e6ULL;
  static const uint64_t static_value2 = 0xac7dd0d073d7baf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::Lego_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/Lego_state";
  }

  static const char* value(const ::vision::Lego_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::Lego_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 posx\n"
"float64 posy\n"
"float64 posz\n"
"float64 rotx\n"
"float64 roty\n"
"float64 rotz\n"
"int64 class_id\n"
;
  }

  static const char* value(const ::vision::Lego_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::Lego_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posx);
      stream.next(m.posy);
      stream.next(m.posz);
      stream.next(m.rotx);
      stream.next(m.roty);
      stream.next(m.rotz);
      stream.next(m.class_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lego_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::Lego_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::Lego_state_<ContainerAllocator>& v)
  {
    s << indent << "posx: ";
    Printer<double>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<double>::stream(s, indent + "  ", v.posy);
    s << indent << "posz: ";
    Printer<double>::stream(s, indent + "  ", v.posz);
    s << indent << "rotx: ";
    Printer<double>::stream(s, indent + "  ", v.rotx);
    s << indent << "roty: ";
    Printer<double>::stream(s, indent + "  ", v.roty);
    s << indent << "rotz: ";
    Printer<double>::stream(s, indent + "  ", v.rotz);
    s << indent << "class_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.class_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_LEGO_STATE_H
